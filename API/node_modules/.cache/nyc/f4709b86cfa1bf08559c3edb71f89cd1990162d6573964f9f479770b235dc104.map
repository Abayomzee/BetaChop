{"version":3,"sources":["order.controller.js"],"names":["response","ResponseGenerator","OrderController","fetchAllOrders","req","res","allOrders","OrderService","setSuccess","send","orderAMeal","body","mealId","type","Number","isNaN","setError","orderedMeal","updateAnOrder","id","params","updateOrder"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAG,IAAIC,0BAAJ,EAAjB;AACA;;;;;;;AAMA,IAAMC,eAAe,GAAG;AACtB;;;;;;AAMAC,EAAAA,cAPsB,0BAOPC,GAPO,EAOFC,GAPE,EAOG;AACvB,QAAMC,SAAS,GAAGC,eAAaJ,cAAb,EAAlB;;AACAH,IAAAA,QAAQ,CAACQ,UAAT,CAAoB,GAApB,EAAyB,IAAzB,EAA+BF,SAA/B;AACA,WAAON,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD,GAXqB;;AAatB;;;;;;AAMAK,EAAAA,UAnBsB,sBAmBXN,GAnBW,EAmBNC,GAnBM,EAmBD;AACnB,QAAI,CAACD,GAAG,CAACO,IAAJ,CAASC,MAAV,IAAoB,CAACR,GAAG,CAACO,IAAJ,CAASE,IAAlC,EAAwC;AACtCb,MAAAA,QAAQ,CAACQ,UAAT,CAAoB,GAApB,EAAyB,6BAAzB,EAAwD,IAAxD;AACA,aAAOR,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD;;AAJkB,oBAMMD,GAAG,CAACO,IANV;AAAA,QAMXC,MANW,aAMXA,MANW;AAAA,QAMHC,IANG,aAMHA,IANG;;AAQnB,QAAIC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,MAAD,CAAnB,CAAJ,EAAkC;AAChCZ,MAAAA,QAAQ,CAACgB,QAAT,CAAkB,GAAlB,EAAuB,yCAAvB;AACA,aAAOhB,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD;;AAED,QAAMY,WAAW,GAAGV,eAAaG,UAAb,CAAwBE,MAAxB,EAAgCC,IAAhC,CAApB;;AAEA,QAAII,WAAW,IAAI,IAAnB,EAAyB;AACvBjB,MAAAA,QAAQ,CAACgB,QAAT,CAAkB,GAAlB,EAAuB,2BAAvB;AACA,aAAOhB,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD;;AAEDL,IAAAA,QAAQ,CAACQ,UAAT,CAAoB,GAApB,EAAyB,4BAAzB,EAAuDS,WAAvD;AACA,WAAOjB,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD,GAzCqB;;AA2CtB;;;;;;AAMAa,EAAAA,aAjDsB,yBAiDRd,GAjDQ,EAiDHC,GAjDG,EAiDE;AAAA,qBACGD,GAAG,CAACO,IADP;AAAA,QACdC,MADc,cACdA,MADc;AAAA,QACNC,IADM,cACNA,IADM;AAAA,QAEdM,EAFc,GAEPf,GAAG,CAACgB,MAFG,CAEdD,EAFc;;AAItB,QAAIL,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACK,EAAD,CAAnB,KAA4BL,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,MAAD,CAAnB,CAAhC,EAA8D;AAC5DZ,MAAAA,QAAQ,CAACgB,QAAT,CAAkB,GAAlB,EAAuB,mCAAvB;AACA,aAAOhB,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD;;AAED,QAAMgB,WAAW,GAAGd,eAAaW,aAAb,CAA2BC,EAA3B,EAA+BP,MAA/B,EAAuCC,IAAvC,CAApB;;AAEA,QAAIQ,WAAW,IAAI,IAAnB,EAAyB;AACvBrB,MAAAA,QAAQ,CAACgB,QAAT,CAAkB,GAAlB,0BAAwCG,EAAxC,8BAA8DP,MAA9D;AACA,aAAOZ,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD;;AACDL,IAAAA,QAAQ,CAACgB,QAAT,CAAkB,GAAlB,EAAuB,gCAAvB,EAAyDK,WAAzD;AACA,WAAOrB,QAAQ,CAACS,IAAT,CAAcJ,GAAd,CAAP;AACD;AAlEqB,CAAxB;eAqEeH,e","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import OrderService from '../services/order.service';\nimport ResponseGenerator from '../utils/ResponseGenerator';\n\nconst response = new ResponseGenerator();\n/**\n * order controller performs controls  request and response -\n * order a meal,\n * modify a meal,\n * get all orders,\n */\nconst OrderController = {\n  /**\n   * @description retrieve and return all orders from our data\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} order object array\n   */\n  fetchAllOrders(req, res) {\n    const allOrders = OrderService.fetchAllOrders();\n    response.setSuccess(200, null, allOrders);\n    return response.send(res);\n  },\n\n  /**\n   * @description order a meal\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  orderAMeal(req, res) {\n    if (!req.body.mealId || !req.body.type) {\n      response.setSuccess(400, 'All parameters are required', null);\n      return response.send(res);\n    }\n\n    const { mealId, type } = req.body;\n\n    if (Number.isNaN(Number(mealId))) {\n      response.setError(400, 'Invalid mealId. mealId must be a number');\n      return response.send(res);\n    }\n\n    const orderedMeal = OrderService.orderAMeal(mealId, type);\n\n    if (orderedMeal == null) {\n      response.setError(404, 'This meal cannot be found');\n      return response.send(res);\n    }\n\n    response.setSuccess(200, 'Your order has been placed', orderedMeal);\n    return response.send(res);\n  },\n\n  /**\n   * @description update an order record\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  updateAnOrder(req, res) {\n    const { mealId, type } = req.body;\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id)) || Number.isNaN(Number(mealId))) {\n      response.setError(400, \"Invalid ID. ID's must be a number\");\n      return response.send(res);\n    }\n\n    const updateOrder = OrderService.updateAnOrder(id, mealId, type);\n\n    if (updateOrder == null) {\n      response.setError(400, `Order with id ${id} or Meal with id ${mealId} cannot be found`);\n      return response.send(res);\n    }\n    response.setError(201, 'Order was successfully updated', updateOrder);\n    return response.send(res);\n  },\n};\n\nexport default OrderController;\n"]}