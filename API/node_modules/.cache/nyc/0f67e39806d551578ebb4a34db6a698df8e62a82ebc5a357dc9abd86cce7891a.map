{"version":3,"sources":["menu.controller.js"],"names":["response","ResponseGenerator","MenuController","fetchMenu","req","res","allMenu","MenuService","menuKeys","Object","keys","length","setSuccess","send","setUpMenu","id","body","addMeal","Number","isNaN","setError","msg"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAG,IAAIC,0BAAJ,EAAjB;AAEA;;;;;;AAKA,IAAMC,cAAc,GAAG;AACrB;;;;;;AAMAC,EAAAA,SAPqB,qBAOXC,GAPW,EAONC,GAPM,EAOD;AAClB,QAAMC,OAAO,GAAGC,cAAYJ,SAAZ,EAAhB;;AACA,QAAMK,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAjB;;AAEA,QAAIE,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzBX,MAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyB,8BAAzB,EAAyD,IAAzD;AACA,aAAOZ,QAAQ,CAACa,IAAT,CAAcR,GAAd,CAAP;AACD;;AACDL,IAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyB,IAAzB,EAA+BN,OAA/B;AACA,WAAON,QAAQ,CAACa,IAAT,CAAcR,GAAd,CAAP;AACD,GAjBoB;;AAmBrB;;;;;;AAMAS,EAAAA,SAzBqB,qBAyBXV,GAzBW,EAyBNC,GAzBM,EAyBD;AAAA,QACVU,EADU,GACHX,GAAG,CAACY,IADD,CACVD,EADU;AAElB,QAAIE,OAAJ;;AAEA,QAAIC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,EAAD,CAAnB,CAAJ,EAA8B;AAC5BE,MAAAA,OAAO,GAAG,IAAV;AACD,KAFD,MAEO;AACLA,MAAAA,OAAO,GAAGV,cAAYO,SAAZ,CAAsBC,EAAtB,CAAV;AACD;;AAED,QAAI,CAACA,EAAL,EAAS;AACPf,MAAAA,QAAQ,CAACoB,QAAT,CAAkB,GAAlB,EAAuB,qBAAvB;AACD,KAFD,MAEO,IAAIF,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,EAAD,CAAnB,CAAJ,EAA8B;AACnCf,MAAAA,QAAQ,CAACoB,QAAT,CAAkB,GAAlB,EAAuB,iCAAvB;AACD,KAFM,MAEA,IAAIH,OAAO,IAAI,IAAf,EAAqB;AAC1BjB,MAAAA,QAAQ,CAACoB,QAAT,CAAkB,GAAlB,yBAAuCL,EAAvC;AACD,KAFM,MAEA,IAAI,OAAOE,OAAP,KAAmB,QAAvB,EAAiC;AACtC,UAAMI,GAAG,GAAGJ,OAAZ;AACAjB,MAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyBS,GAAzB,EAA8B,IAA9B;AACD,KAHM,MAGA;AACLrB,MAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyB,sCAAzB,EAAiEK,OAAjE;AACD;;AACD,WAAOjB,QAAQ,CAACa,IAAT,CAAcR,GAAd,CAAP;AACD;AAhDoB,CAAvB;eAmDeH,c","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import MenuService from '../services/menu.service';\nimport ResponseGenerator from '../utils/ResponseGenerator';\n\nconst response = new ResponseGenerator();\n\n/**\n * menu controller performs controls  request and response -\n * fetching today's menu,\n * setup menu for today,\n */\nconst MenuController = {\n  /**\n   * @description retrieve and return menu for the day\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} menu object array\n   */\n  fetchMenu(req, res) {\n    const allMenu = MenuService.fetchMenu();\n    const menuKeys = Object.keys(allMenu);\n\n    if (menuKeys.length === 0) {\n      response.setSuccess(200, 'Menu list for today is empty', null);\n      return response.send(res);\n    }\n    response.setSuccess(200, null, allMenu);\n    return response.send(res);\n  },\n\n  /**\n   * @description add a meal to today menu\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  setUpMenu(req, res) {\n    const { id } = req.body;\n    let addMeal;\n\n    if (Number.isNaN(Number(id))) {\n      addMeal = null;\n    } else {\n      addMeal = MenuService.setUpMenu(id);\n    }\n\n    if (!id) {\n      response.setError(400, 'meal id is required');\n    } else if (Number.isNaN(Number(id))) {\n      response.setError(400, 'Invalid ID. ID must be a number');\n    } else if (addMeal == null) {\n      response.setError(404, `Meal with id ${id} cannot be found`);\n    } else if (typeof addMeal === 'string') {\n      const msg = addMeal;\n      response.setSuccess(200, msg, null);\n    } else {\n      response.setSuccess(201, 'Meal successfully added to Menu List', addMeal);\n    }\n    return response.send(res);\n  },\n};\n\nexport default MenuController;\n"]}