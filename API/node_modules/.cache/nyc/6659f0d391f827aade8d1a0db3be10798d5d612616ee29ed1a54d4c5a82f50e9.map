{"version":3,"sources":["meal.controller.js"],"names":["MealController","fetchAllMeals","req","res","allMeals","MealService","json","status","data","addAMeal","body","name","price","size","send","message","newMeal","createdMeal","updateAMeal","id","params","Number","isNaN","updateMeal","getAMeal","foundMeal","foundMealKeys","Object","keys","length","deleteAMeal","deletedMeal"],"mappings":"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","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import MealService from '../services/meal.service';\n\n/**\n * meal controller performs controls  request and response -\n * fetching all meal,\n * adding a new meal,\n * updating an existing meal and\n * getting a particular meal\n */\nconst MealController = {\n  /**\n   * @description retrieve and return all meals from our data\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} meal object array\n   */\n  fetchAllMeals(req, res) {\n    const allMeals = MealService.fetchAllMeals();\n    return res\n      .json({\n        status: 'success',\n        data: allMeals,\n      })\n      .status(200);\n  },\n\n  /**\n   * @description create a meal record\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  addAMeal(req, res) {\n    if (!req.body.name || !req.body.price || !req.body.size) {\n      return res.status(400).send({\n        status: 'error',\n        message: 'All parameters are required',\n      });\n    }\n\n    const newMeal = req.body;\n    const createdMeal = MealService.addAMeal(newMeal);\n    return res\n      .json({\n        status: 'success',\n        message: 'Meal successfully added!',\n        data: createdMeal,\n      })\n      .status(201);\n  },\n\n  /**\n   * @description update a meal record\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  updateAMeal(req, res) {\n    const newMeal = req.body;\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id))) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'Invalid ID. ID must be a number',\n      });\n    }\n\n    const updateMeal = MealService.updateAMeal(id, newMeal);\n\n    if (updateMeal == null) {\n      return res.status(400).json({\n        status: 'error',\n        message: `Meal with id ${id} cannot be found`,\n      });\n    }\n    return res\n      .json({\n        status: 'success',\n        message: 'Meal was successfully updated',\n        data: updateMeal,\n      })\n      .status(201);\n  },\n\n  /**\n   * @description get a specific meal\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} found meal\n   */\n  getAMeal(req, res) {\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id))) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'Invalid ID. ID must be a number',\n      });\n    }\n\n    const foundMeal = MealService.getAMeal(id);\n    const foundMealKeys = Object.keys(foundMeal);\n\n    if (foundMealKeys.length === 0) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Meal cannot be found',\n      });\n    }\n\n    return res\n      .json({\n        status: 'success',\n        data: foundMeal,\n      })\n      .status(200);\n  },\n\n  /**\n   * @description get a specific meal\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} response\n   */\n  deleteAMeal(req, res) {\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id))) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'Invalid ID. ID must be a number',\n      });\n    }\n\n    const deletedMeal = MealService.deleteAMeal(id);\n\n    if (deletedMeal == null) {\n      return res\n        .json({\n          status: 'error',\n          message: `Meal with id ${id} cannot be found`,\n        })\n        .status(404);\n    }\n\n    return res\n      .json({\n        status: 'success',\n        message: 'Meal was successfully deleted',\n      })\n      .status(200);\n  },\n};\n\nexport default MealController;\n"]}