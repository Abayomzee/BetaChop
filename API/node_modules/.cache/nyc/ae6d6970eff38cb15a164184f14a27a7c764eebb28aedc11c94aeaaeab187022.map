{"version":3,"sources":["order.service.js"],"names":["OrderService","fetchAllOrders","dummyData","orders","map","order","newOrder","Order","id","type","meal","orderAMeal","foundMeal","menu","find","Number","orderLength","length","lastId","newId","push","updateAnOrder","orderId","mealId","foundOrder","newMeal"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;AAIA,IAAMA,YAAY,GAAG;AACnB;;;;AAIAC,EAAAA,cALmB,4BAKF;AACf,WAAOC,mBAAUC,MAAV,CAAiBC,GAAjB,CAAqB,UAACC,KAAD,EAAW;AACrC,UAAMC,QAAQ,GAAG,IAAIC,cAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,EAAT,GAAcH,KAAK,CAACG,EAApB;AACAF,MAAAA,QAAQ,CAACG,IAAT,GAAgBJ,KAAK,CAACI,IAAtB;AACAH,MAAAA,QAAQ,CAACI,IAAT,GAAgBL,KAAK,CAACK,IAAtB;AACA,aAAOJ,QAAP;AACD,KANM,CAAP;AAOD,GAbkB;;AAenB;;;;AAIAK,EAAAA,UAnBmB,sBAmBRH,EAnBQ,EAmBJC,IAnBI,EAmBE;AACnB,QAAMG,SAAS,GAAGV,mBAAUW,IAAV,CAAeC,IAAf,CAAoB,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACF,EAAL,KAAYO,MAAM,CAACP,EAAD,CAAtB;AAAA,KAAxB,CAAlB;;AAEA,QAAII,SAAJ,EAAe;AACb,UAAMI,WAAW,GAAGd,mBAAUC,MAAV,CAAiBc,MAArC;AACA,UAAMC,MAAM,GAAGhB,mBAAUC,MAAV,CAAiBa,WAAW,GAAG,CAA/B,EAAkCR,EAAjD;AACA,UAAMW,KAAK,GAAGD,MAAM,GAAG,CAAvB;AAEA,UAAMZ,QAAQ,GAAG,IAAIC,cAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,EAAT,GAAcW,KAAd;AACAb,MAAAA,QAAQ,CAACG,IAAT,GAAgBA,IAAhB;AACAH,MAAAA,QAAQ,CAACI,IAAT,GAAgBE,SAAhB;;AACAV,yBAAUC,MAAV,CAAiBiB,IAAjB,CAAsBd,QAAtB;;AAEA,aAAOA,QAAP;AACD;;AAED,WAAOM,SAAP;AACD,GArCkB;;AAuCnB;;;;;;AAMAS,EAAAA,aA7CmB,yBA6CLC,OA7CK,EA6CIC,MA7CJ,EA6CYd,IA7CZ,EA6CkB;AACnC,QAAMe,UAAU,GAAGtB,mBAAUC,MAAV,CAAiBW,IAAjB,CAAsB,UAAAT,KAAK;AAAA,aAAIA,KAAK,CAACG,EAAN,KAAaO,MAAM,CAACO,OAAD,CAAvB;AAAA,KAA3B,CAAnB;;AACA,QAAMG,OAAO,GAAGvB,mBAAUW,IAAV,CAAeC,IAAf,CAAoB,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACF,EAAL,KAAYO,MAAM,CAACQ,MAAD,CAAtB;AAAA,KAAxB,CAAhB;;AAEA,QAAIC,UAAU,IAAIC,OAAlB,EAA2B;AACzBD,MAAAA,UAAU,CAACf,IAAX,GAAkBA,IAAlB;AACAe,MAAAA,UAAU,CAACd,IAAX,GAAkBe,OAAlB;AACA,aAAOD,UAAP;AACD;;AACD,WAAO,IAAP;AACD;AAvDkB,CAArB;eA0DexB,Y","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/services","sourcesContent":["import dummyData from '../utils/dummyData';\nimport Order from '../models/order.model';\n\n/**\n * order services performs all action related to order-\n * order a meal, modify an order, get all orders\n */\nconst OrderService = {\n  /**\n   * @description Retrieve and return all orders from our dummyy data\n   * @returns {Array} order object array\n   */\n  fetchAllOrders() {\n    return dummyData.orders.map((order) => {\n      const newOrder = new Order();\n      newOrder.id = order.id;\n      newOrder.type = order.type;\n      newOrder.meal = order.meal;\n      return newOrder;\n    });\n  },\n\n  /**\n   * @description Order a meal\n   * @returns {Array} order object array\n   */\n  orderAMeal(id, type) {\n    const foundMeal = dummyData.menu.find(meal => meal.id === Number(id));\n\n    if (foundMeal) {\n      const orderLength = dummyData.orders.length;\n      const lastId = dummyData.orders[orderLength - 1].id;\n      const newId = lastId + 1;\n\n      const newOrder = new Order();\n      newOrder.id = newId;\n      newOrder.type = type;\n      newOrder.meal = foundMeal;\n      dummyData.orders.push(newOrder);\n\n      return newOrder;\n    }\n\n    return foundMeal;\n  },\n\n  /**\n   * @description Updates an existing order with a new order object\n   * @param { int } id\n   * @param {object} updatedOrder\n   * @returns {object} updated order\n   */\n  updateAnOrder(orderId, mealId, type) {\n    const foundOrder = dummyData.orders.find(order => order.id === Number(orderId));\n    const newMeal = dummyData.menu.find(meal => meal.id === Number(mealId));\n\n    if (foundOrder && newMeal) {\n      foundOrder.type = type;\n      foundOrder.meal = newMeal;\n      return foundOrder;\n    }\n    return null;\n  },\n};\n\nexport default OrderService;\n"]}