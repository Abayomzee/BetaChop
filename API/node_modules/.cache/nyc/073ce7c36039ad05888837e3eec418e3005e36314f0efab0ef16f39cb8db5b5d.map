{"version":3,"sources":["meal.service.js"],"names":["MealService","fetchAllMeals","dummyData","meals","map","meal","newMeal","Meal","id","name","size","price","addAMeal","mealLength","length","lastId","newId","push","updateAMeal","updatedMeal","foundMeal","find","Number","getAMeal","deleteAMeal","index","indexOf","splice"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;AAIA,IAAMA,WAAW,GAAG;AAClB;;;;AAIAC,EAAAA,aALkB,2BAKF;AACd,WAAOC,mBAAUC,KAAV,CAAgBC,GAAhB,CAAoB,UAACC,IAAD,EAAU;AACnC,UAAMC,OAAO,GAAG,IAAIC,aAAJ,EAAhB;AACAD,MAAAA,OAAO,CAACE,EAAR,GAAaH,IAAI,CAACG,EAAlB;AACAF,MAAAA,OAAO,CAACG,IAAR,GAAeJ,IAAI,CAACI,IAApB;AACAH,MAAAA,OAAO,CAACI,IAAR,GAAeL,IAAI,CAACK,IAApB;AACAJ,MAAAA,OAAO,CAACK,KAAR,GAAgBN,IAAI,CAACM,KAArB;AAEA,aAAOL,OAAP;AACD,KARM,CAAP;AASD,GAfiB;;AAiBlB;;;;;AAKAM,EAAAA,QAtBkB,oBAsBTP,IAtBS,EAsBH;AACb,QAAMQ,UAAU,GAAGX,mBAAUC,KAAV,CAAgBW,MAAnC;AACA,QAAMC,MAAM,GAAGb,mBAAUC,KAAV,CAAgBU,UAAU,GAAG,CAA7B,EAAgCL,EAA/C;AACA,QAAMQ,KAAK,GAAGD,MAAM,GAAG,CAAvB;AAEA,QAAMT,OAAO,GAAGD,IAAhB;AACAC,IAAAA,OAAO,CAACE,EAAR,GAAaQ,KAAb;;AAEAd,uBAAUC,KAAV,CAAgBc,IAAhB,CAAqBX,OAArB;;AACA,WAAOD,IAAP;AACD,GAhCiB;;AAkClB;;;;;;AAMAa,EAAAA,WAxCkB,uBAwCNV,EAxCM,EAwCFW,WAxCE,EAwCW;AAC3B,QAAMC,SAAS,GAAGlB,mBAAUC,KAAV,CAAgBkB,IAAhB,CAAqB,UAAAhB,IAAI;AAAA,aAAIA,IAAI,CAACG,EAAL,KAAYc,MAAM,CAACd,EAAD,CAAtB;AAAA,KAAzB,CAAlB;;AAEA,QAAIY,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACX,IAAV,GAAiBU,WAAW,CAACV,IAA7B;AACAW,MAAAA,SAAS,CAACT,KAAV,GAAkBQ,WAAW,CAACR,KAA9B;AACAS,MAAAA,SAAS,CAACV,IAAV,GAAiBS,WAAW,CAACT,IAA7B;AACD;;AACD,WAAOU,SAAP;AACD,GAjDiB;;AAmDlB;;;;;AAKAG,EAAAA,QAxDkB,oBAwDTf,EAxDS,EAwDL;AACX,QAAMY,SAAS,GAAGlB,mBAAUC,KAAV,CAAgBkB,IAAhB,CAAqB,UAAAhB,IAAI;AAAA,aAAIA,IAAI,CAACG,EAAL,KAAYc,MAAM,CAACd,EAAD,CAAtB;AAAA,KAAzB,CAAlB;;AACA,WAAOY,SAAS,IAAI,EAApB;AACD,GA3DiB;;AA6DlB;;;;;AAKAI,EAAAA,WAlEkB,uBAkENhB,EAlEM,EAkEF;AACd,QAAMY,SAAS,GAAGlB,mBAAUC,KAAV,CAAgBkB,IAAhB,CAAqB,UAAAhB,IAAI;AAAA,aAAIA,IAAI,CAACG,EAAL,KAAYc,MAAM,CAACd,EAAD,CAAtB;AAAA,KAAzB,CAAlB;;AACA,QAAIY,SAAJ,EAAe;AACb,UAAMK,KAAK,GAAGvB,mBAAUC,KAAV,CAAgBuB,OAAhB,CAAwBN,SAAxB,CAAd;;AACA,UAAIK,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdvB,2BAAUC,KAAV,CAAgBwB,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF;;AACD,WAAOL,SAAP;AACD;AA3EiB,CAApB;eA6EepB,W","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/services","sourcesContent":["import dummyData from '../utils/dummyData';\nimport Meal from '../models/meal.model';\n\n/**\n * meal services performs all action related to meal - fetching all meal, adding a new meal,\n *  updating an existing meal and getting a particular meal\n */\nconst MealService = {\n  /**\n   * @description Retrieve and return all meals from our dunny data\n   * @returns {Array} meal object array\n   */\n  fetchAllMeals() {\n    return dummyData.meals.map((meal) => {\n      const newMeal = new Meal();\n      newMeal.id = meal.id;\n      newMeal.name = meal.name;\n      newMeal.size = meal.size;\n      newMeal.price = meal.price;\n\n      return newMeal;\n    });\n  },\n\n  /**\n   * @description Takes a new meal object and adds it our dummy data\n   * @param {object} meal\n   * @returns {object} meal\n   */\n  addAMeal(meal) {\n    const mealLength = dummyData.meals.length;\n    const lastId = dummyData.meals[mealLength - 1].id;\n    const newId = lastId + 1;\n\n    const newMeal = meal;\n    newMeal.id = newId;\n\n    dummyData.meals.push(newMeal);\n    return meal;\n  },\n\n  /**\n   * @description Updates an existing meal with a new meal object\n   * @param { int } id\n   * @param {object} updatedMeal\n   * @returns {object} updated meal\n   */\n  updateAMeal(id, updatedMeal) {\n    const foundMeal = dummyData.meals.find(meal => meal.id === Number(id));\n\n    if (foundMeal) {\n      foundMeal.name = updatedMeal.name;\n      foundMeal.price = updatedMeal.price;\n      foundMeal.size = updatedMeal.size;\n    }\n    return foundMeal;\n  },\n\n  /**\n   * @description Finds a meal record from meal Dummy Data\n   * @param { int } id\n   * @returns {object} meal\n   */\n  getAMeal(id) {\n    const foundMeal = dummyData.meals.find(meal => meal.id === Number(id));\n    return foundMeal || {};\n  },\n\n  /**\n   * @description Delete a meal record from meal Dummy Data\n   * @param { int } id\n   * @returns {object} meal\n   */\n  deleteAMeal(id) {\n    const foundMeal = dummyData.meals.find(meal => meal.id === Number(id));\n    if (foundMeal) {\n      const index = dummyData.meals.indexOf(foundMeal);\n      if (index > -1) {\n        dummyData.meals.splice(index, 1);\n      }\n    }\n    return foundMeal;\n  },\n};\nexport default MealService;\n"]}