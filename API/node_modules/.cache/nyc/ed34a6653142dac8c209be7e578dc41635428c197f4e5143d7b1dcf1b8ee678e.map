{"version":3,"sources":["menu.controller.js"],"names":["sendError","status","message","data","MenuController","fetchMenu","req","res","allMenu","MenuService","foundMealKeys","Object","keys","length","json","setUpMenu","id","body","send","Number","isNaN","addMeal","msg"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;AAMA,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAA+C;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AAC7C,SAAO;AACLF,IAAAA,MAAM,EAANA,MADK;AAELC,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,IAAI,EAAJA;AAHK,GAAP;AAKD;;AAED,IAAMC,cAAc,GAAG;AACrB;;;;;;AAMAC,EAAAA,SAPqB,qBAOXC,GAPW,EAONC,GAPM,EAOD;AAClB,QAAMC,OAAO,GAAGC,cAAYJ,SAAZ,EAAhB;;AACA,QAAMK,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAtB;;AAEA,QAAIE,aAAa,CAACG,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,aAAON,GAAG,CAACN,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqB;AAC1Bb,QAAAA,MAAM,EAAE,SADkB;AAE1BC,QAAAA,OAAO,EAAE;AAFiB,OAArB,CAAP;AAID;;AACD,WAAOK,GAAG,CAACN,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqB;AAC1Bb,MAAAA,MAAM,EAAE,SADkB;AAE1BE,MAAAA,IAAI,EAAEK;AAFoB,KAArB,CAAP;AAID,GArBoB;;AAuBrB;;;;;;AAMAO,EAAAA,SA7BqB,qBA6BXT,GA7BW,EA6BNC,GA7BM,EA6BD;AAAA,QACVS,EADU,GACHV,GAAG,CAACW,IADD,CACVD,EADU;;AAGlB,QAAI,CAACA,EAAL,EAAS;AACP,aAAOT,GAAG,CAACN,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBlB,SAAS,CAAC,OAAD,EAAU,iCAAV,EAA6C,IAA7C,CAA9B,CAAP;AACD;;AAED,QAAImB,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,EAAD,CAAnB,CAAJ,EAA8B;AAC5B,aAAOT,GAAG,CAACN,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,EAAP;AACD;;AAED,QAAMO,OAAO,GAAGZ,cAAYM,SAAZ,CAAsBC,EAAtB,CAAhB;;AAEA,QAAIK,OAAO,IAAI,IAAf,EAAqB;AACnB,aAAOd,GAAG,CAACN,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBlB,SAAS,CAAC,OAAD,yBAA0BgB,EAA1B,uBAAgD,IAAhD,CAA9B,CAAP;AACD;;AAED,QAAI,OAAOK,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAMC,GAAG,GAAGD,OAAZ;AACA,aAAOd,GAAG,CAACN,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqBd,SAAS,CAAC,SAAD,EAAYsB,GAAZ,EAAiB,IAAjB,CAA9B,CAAP;AACD;;AAED,WAAOf,GAAG,CAACO,IAAJ,CACJb,MADI,CACG,GADH,EAEJa,IAFI,CAECd,SAAS,CAAC,SAAD,EAAY,sCAAZ,EAAoDqB,OAApD,EAA6D,IAA7D,CAFV,CAAP;AAGD;AAtDoB,CAAvB;eAyDejB,c","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import MenuService from '../services/menu.service';\n\n/**\n * menu controller performs controls  request and response -\n * fetching today's menu,\n * setup menu for today,\n */\n\nfunction sendError(status, message, data = '') {\n  return {\n    status,\n    message,\n    data,\n  };\n}\n\nconst MenuController = {\n  /**\n   * @description retrieve and return menu for the day\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} menu object array\n   */\n  fetchMenu(req, res) {\n    const allMenu = MenuService.fetchMenu();\n    const foundMealKeys = Object.keys(allMenu);\n\n    if (foundMealKeys.length === 0) {\n      return res.status(200).json({\n        status: 'success',\n        message: 'Menu list for today is empty',\n      });\n    }\n    return res.status(200).json({\n      status: 'success',\n      data: allMenu,\n    });\n  },\n\n  /**\n   * @description add a meal to today menu\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  setUpMenu(req, res) {\n    const { id } = req.body;\n\n    if (!id) {\n      return res.status(400).send(sendError('error', 'Invalid ID. ID must be a number', null));\n    }\n\n    if (Number.isNaN(Number(id))) {\n      return res.status(400).json();\n    }\n\n    const addMeal = MenuService.setUpMenu(id);\n\n    if (addMeal == null) {\n      return res.status(404).send(sendError('error', `Meal with id ${id} cannot be found`, null));\n    }\n\n    if (typeof addMeal === 'string') {\n      const msg = addMeal;\n      return res.status(200).json(sendError('success', msg, null));\n    }\n\n    return res.json\n      .status(201)\n      .json(sendError('success', 'Meal successfully added to Menu List', addMeal, null));\n  },\n};\n\nexport default MenuController;\n"]}