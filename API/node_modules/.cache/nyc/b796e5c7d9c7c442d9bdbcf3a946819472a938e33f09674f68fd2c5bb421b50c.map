{"version":3,"sources":["order.controller.js"],"names":["response","ResponseGenerator","OrderController","fetchAllOrders","req","res","allOrders","OrderService","setSuccess","send","orderAMeal","body","mealId","type","Number","isNaN","setError","orderedMeal","status","json","message","order","updateAnOrder","id","params","updateOrder","data"],"mappings":"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","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import OrderService from '../services/order.service';\nimport ResponseGenerator from '../utils/ResponseGenerator';\n\nconst response = new ResponseGenerator();\n/**\n * order controller performs controls  request and response -\n * order a meal,\n * modify a meal,\n * get all orders,\n */\nconst OrderController = {\n  /**\n   * @description retrieve and return all orders from our data\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} order object array\n   */\n  fetchAllOrders(req, res) {\n    const allOrders = OrderService.fetchAllOrders();\n    response.setSuccess(200, null, allOrders);\n    return response.send(res);\n  },\n\n  /**\n   * @description order a meal\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  orderAMeal(req, res) {\n    if (!req.body.mealId || !req.body.type) {\n      response.setSuccess(400, 'All parameters are required', null);\n      return response.send(res);\n    }\n\n    const { mealId, type } = req.body;\n\n    if (Number.isNaN(Number(mealId))) {\n      response.setError(400, 'Invalid mealId. mealId must be a number');\n      return response.send(res);\n    }\n\n    const orderedMeal = OrderService.orderAMeal(mealId, type);\n\n    if (orderedMeal == null) {\n      response.setError(404, 'This meal cannot be found');\n      return response.send(res);\n    }\n\n    return res.status(200).json({\n      status: 'success',\n      message: 'Your order has been placed',\n      order: orderedMeal,\n    });\n  },\n\n  /**\n   * @description update an order record\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  updateAnOrder(req, res) {\n    const { mealId, type } = req.body;\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id)) || Number.isNaN(Number(mealId))) {\n      return res.status(400).json({\n        status: 'error',\n        message: \"Invalid ID. ID's must be a number\",\n      });\n    }\n\n    const updateOrder = OrderService.updateAnOrder(id, mealId, type);\n\n    if (updateOrder == null) {\n      return res.status(400).json({\n        status: 'error',\n        message: `Order with id ${id} or Meal with id ${mealId} cannot be found`,\n      });\n    }\n    return res\n      .json({\n        status: 'success',\n        message: 'Order was successfully updated',\n        data: updateOrder,\n      })\n      .status(201);\n  },\n};\n\nexport default OrderController;\n"]}