{"version":3,"sources":["meal.controller.js"],"names":["response","ResponseGenerator","MealController","fetchAllMeals","req","res","allMeals","MealService","setSuccess","send","addAMeal","body","name","price","size","setError","newMeal","createdMeal","updateAMeal","id","params","Number","isNaN","updateMeal","getAMeal","foundMeal","foundMealKeys","Object","keys","length","status","json","message","data","deleteAMeal","deletedMeal"],"mappings":"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","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import MealService from '../services/meal.service';\nimport ResponseGenerator from '../utils/ResponseGenerator';\n\n/**\n * meal controller performs controls  request and response -\n * fetching all meal,\n * adding a new meal,\n * updating an existing meal and\n * getting a particular meal\n */\n\nconst response = new ResponseGenerator();\n\nconst MealController = {\n  /**\n   * @description retrieve and return all meals from our data\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} meal object array\n   */\n  fetchAllMeals(req, res) {\n    const allMeals = MealService.fetchAllMeals();\n    response.setSuccess(200, '', allMeals);\n    return response.send(res);\n  },\n\n  /**\n   * @description create a meal record\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  addAMeal(req, res) {\n    if (!req.body.name || !req.body.price || !req.body.size) {\n      response.setError(400, 'All parameters are required', null);\n      return response.send(res);\n    }\n\n    const newMeal = req.body;\n    const createdMeal = MealService.addAMeal(newMeal);\n    response.setSuccess(201, 'Meal successfully added!', createdMeal);\n    return response.send(res);\n  },\n\n  /**\n   * @description update a meal record\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  updateAMeal(req, res) {\n    const newMeal = req.body;\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id))) {\n      response.setSuccess(400, 'Invalid ID. ID must be a number', null);\n      return response.send(res);\n    }\n\n    const updateMeal = MealService.updateAMeal(id, newMeal);\n\n    if (updateMeal == null) {\n      response.setError(400, `Meal with id ${id} cannot be found`, null);\n      return response.send(res);\n    }\n\n    response.setSuccess(200, 'Meal was successfully updated', updateMeal);\n    return response.send(res);\n  },\n\n  /**\n   * @description get a specific meal\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} found meal\n   */\n  getAMeal(req, res) {\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id))) {\n      response.setError(400, 'Invalid ID. ID must be a number', null);\n      return response.send(res);\n    }\n\n    const foundMeal = MealService.getAMeal(id);\n    const foundMealKeys = Object.keys(foundMeal);\n\n    if (foundMealKeys.length === 0) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Meal cannot be found',\n      });\n    }\n\n    return res.status(200).json({\n      status: 'success',\n      data: foundMeal,\n    });\n  },\n\n  /**\n   * @description get a specific meal\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} response\n   */\n  deleteAMeal(req, res) {\n    const { id } = req.params;\n\n    if (Number.isNaN(Number(id))) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'Invalid ID. ID must be a number',\n      });\n    }\n\n    const deletedMeal = MealService.deleteAMeal(id);\n\n    if (deletedMeal == null) {\n      return res\n        .json({\n          status: 'error',\n          message: `Meal with id ${id} cannot be found`,\n        })\n        .status(404);\n    }\n\n    return res\n      .json({\n        status: 'success',\n        message: 'Meal was successfully deleted',\n      })\n      .status(200);\n  },\n};\n\nexport default MealController;\n"]}