{"version":3,"sources":["menu.controller.js"],"names":["response","ResponseGenerator","MenuController","fetchMenu","req","res","allMenu","MenuService","menuKeys","Object","keys","length","setSuccess","send","setUpMenu","id","body","setError","Number","isNaN","addMeal","msg"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAG,IAAIC,0BAAJ,EAAjB;AAEA;;;;;;AAKA,IAAMC,cAAc,GAAG;AACrB;;;;;;AAMAC,EAAAA,SAPqB,qBAOXC,GAPW,EAONC,GAPM,EAOD;AAClB,QAAMC,OAAO,GAAGC,cAAYJ,SAAZ,EAAhB;;AACA,QAAMK,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAjB;;AAEA,QAAIE,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzBX,MAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyB,8BAAzB,EAAyD,IAAzD;AACAZ,MAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD;;AACDL,IAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyB,IAAzB,EAA+BN,OAA/B;AACAN,IAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD,GAjBoB;;AAmBrB;;;;;;AAMAS,EAAAA,SAzBqB,qBAyBXV,GAzBW,EAyBNC,GAzBM,EAyBD;AAAA,QACVU,EADU,GACHX,GAAG,CAACY,IADD,CACVD,EADU;;AAGlB,QAAI,CAACA,EAAL,EAAS;AACPf,MAAAA,QAAQ,CAACiB,QAAT,CAAkB,GAAlB,EAAuB,qBAAvB;AACAjB,MAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD;;AAED,QAAIa,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,EAAD,CAAnB,CAAJ,EAA8B;AAC5Bf,MAAAA,QAAQ,CAACiB,QAAT,CAAkB,GAAlB,EAAuB,iCAAvB;AACAjB,MAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD;;AAED,QAAMe,OAAO,GAAGb,cAAYO,SAAZ,CAAsBC,EAAtB,CAAhB;;AAEA,QAAIK,OAAO,IAAI,IAAf,EAAqB;AACnBpB,MAAAA,QAAQ,CAACiB,QAAT,CAAkB,GAAlB,yBAAuCF,EAAvC;AACAf,MAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD;;AAED,QAAI,OAAOe,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAMC,GAAG,GAAGD,OAAZ;AACApB,MAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyBS,GAAzB,EAA8B,IAA9B;AACArB,MAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD;;AACDL,IAAAA,QAAQ,CAACY,UAAT,CAAoB,GAApB,EAAyB,sCAAzB,EAAiEQ,OAAjE;AACApB,IAAAA,QAAQ,CAACa,IAAT,CAAcR,GAAd;AACD;AApDoB,CAAvB;eAuDeH,c","sourceRoot":"/Users/codepreneur/WebstormProjects/BetaChop/API/v1/controllers","sourcesContent":["import MenuService from '../services/menu.service';\nimport ResponseGenerator from '../utils/ResponseGenerator';\n\nconst response = new ResponseGenerator();\n\n/**\n * menu controller performs controls  request and response -\n * fetching today's menu,\n * setup menu for today,\n */\nconst MenuController = {\n  /**\n   * @description retrieve and return menu for the day\n   * @param {object} req\n   * @param {object} res\n   * @returns {Array} menu object array\n   */\n  fetchMenu(req, res) {\n    const allMenu = MenuService.fetchMenu();\n    const menuKeys = Object.keys(allMenu);\n\n    if (menuKeys.length === 0) {\n      response.setSuccess(200, 'Menu list for today is empty', null);\n      response.send(res);\n    }\n    response.setSuccess(200, null, allMenu);\n    response.send(res);\n  },\n\n  /**\n   * @description add a meal to today menu\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} apiResponse\n   */\n  setUpMenu(req, res) {\n    const { id } = req.body;\n\n    if (!id) {\n      response.setError(400, 'meal id is required');\n      response.send(res);\n    }\n\n    if (Number.isNaN(Number(id))) {\n      response.setError(400, 'Invalid ID. ID must be a number');\n      response.send(res);\n    }\n\n    const addMeal = MenuService.setUpMenu(id);\n\n    if (addMeal == null) {\n      response.setError(404, `Meal with id ${id} cannot be found`);\n      response.send(res);\n    }\n\n    if (typeof addMeal === 'string') {\n      const msg = addMeal;\n      response.setSuccess(200, msg, null);\n      response.send(res);\n    }\n    response.setSuccess(201, 'Meal successfully added to Menu List', addMeal);\n    response.send(res);\n  },\n};\n\nexport default MenuController;\n"]}